/*
本文件自动生成，请勿手工修改
Version={version}
*/

#ifndef {version}_PACKAGES_H
#define {version}_PACKAGES_H

#include "../ID.h"
#include "../Declare.h"
#include "../FtdMessageUtil.h"

{include_file_headers}

namespace FTD
{{

{declare_smart_ptr_lines}

struct PackageBuffer
{{
    bool m_isReceiveReq;
	PackageBuffer(bool isReceiveReq) : m_isReceiveReq(isReceiveReq)
	{{
	}}
{package_members}

	int readFtdMessage(const std::string& ftdMsg)
	{{
		FtdHeader ftdHeader = {{0}};
		readFtdHeader(ftdMsg.c_str(), ftdHeader);
		if (ftdHeader.FTDType == FTDTypeNone)
		{{
			return TID_Heartbeat;
		}}
		if (ftdHeader.FTDType == FTDTypeFTDC)
		{{
			std::string ftdcMsg;
			ftdcMsg.assign(ftdMsg, FTDC_HEADER_LENGTH + ftdHeader.FTDExtHeaderLength, ftdHeader.FTDCLength);
			return readFtdcMessage(ftdcMsg);
		}}
		if (ftdHeader.FTDType == FTDTypeCompressed)
		{{
			FtdExt ext = {{0}};
			readFtdExt(ftdMsg.c_str()+FTDC_HEADER_LENGTH, ftdHeader.FTDExtHeaderLength, ext);
			std::string ftdcMsg;
			
			ftdcMsg.assign(ftdMsg, FTDC_HEADER_LENGTH + ftdHeader.FTDExtHeaderLength, ftdHeader.FTDCLength);
			std::string rawFtdcMsg = FtdMessageUtil::unCompressFtdcMessage(ftdcMsg, ext.compressMethod);
			return readFtdcMessage(rawFtdcMsg);
		}}
		return -1;

	}}

	int readFtdcMessage(const std::string& message)
	{{
		FtdcHeader header;
		readFtdcHeader(message.c_str(), header);

		int readResult = -1;
		switch(header.transactionId)
		{{
{read_cases}
			default:
			{{
				break;
			}}
		}}
		return readResult;
	}}

	Package* retrievePackage(int transactionId)
	{{
		Package* retrieveResult = nullptr;
		switch(transactionId)
		{{
{retrieve_cases}
            default:
			{{
				break;
			}}
		}}
		return retrieveResult;
	}}

	///deprecating?
	Package* OnFtdcMessage(const std::string& message)
	{{
		int transactionId = readFtdcMessage(message);
		return retrievePackage(transactionId);
	}}
}};

	
}}
#endif