#define int1  signed<1>
#define int2  signed<2>
#define int4  signed<4>
#define uint1  unsigned<1>
#define uint2  unsigned<2>
#define uint4  unsigned<4>
#define uint8 unsigned<8>
#define PriceType decimal< 10, 3>
#define AmountType decimal< 14, 2>
#define VolumeType unsigned<8>


declare database genericdb;


persistent class User
{
	int4 broker_id;
	unsigned<4> user_id;
	char<8> password;

	unique tree<user_id> UserIdIdx;
};

persistent class OrderInsert
{
	uint2 owner_type;
	int4 user_id;
	int4 investor_id;
	int4 front_id;
	int4 session_id;
	int4 order_ref;
	char<10> secu_account;
	string instrument_code;
	uint1 exchange_type;
	uint1 direction;
	int4 business_code;
	uint1 price_type;
	PriceType price;
	VolumeType volume;

	unique tree<front_id, session_id, order_ref> SessionIdx;
	tree<investor_id> InvestorIdx;
};

persistent class Order
{
	uint2 owner_type;
	int4 front_id;
	int4 session_id;
	int4 order_ref;
	int4 user_id;
	int4 investor_id;
	char<10> secu_account;
	string security_code;
	uint1 exchange_type;
	uint1 bs_flag;
	int4 business_code;
	uint1 price_type;
	PriceType price;
	VolumeType volume;
	int4 branch_id;
	int4 pbu_id;
	char<10> order_sys_sno;
	char<10> order_exchange_sno;
	uint1 status;
	VolumeType volume_traded;
	AmountType amount_traded;
	VolumeType volume_cancelled;

	tree<front_id, session_id, order_ref> SessionIdx;
	tree<order_exchange_sno, exchange_type, branch_id> ExchangeIdx;
	unique tree<order_sys_sno> SysIdx;
	tree<investor_id> InvestorIdx;

	event<new> OrderNewEvent;
	event<volume_traded update> OrderTradedVolumeUpdateEvent;
	event<status update> OrderStatusUpdateEvent;
};

persistent class OrderAction
{
	uint2 owner_type;
	int4 user_id;
	int4 investor_id;
	int4 front_id;
	int4 session_id;
	int4 order_ref;
	char<10> order_sys_sno;
	uint1 exchange_type;
	char<10> order_exchange_sno;
	int4 branch_id;
	char<10> secu_account;
	string security_code;
	uint1 bs_flag;
	VolumeType volume;
	PriceType price;
	char<10> action_sys_sno;
	char<10> action_exchange_sno;

	unique tree<action_sys_sno> SysIdx;
	tree<action_sys_sno, exchange_type, branch_id> ExchangeIdx;
	tree<investor_id> InvestorIdx;

};

persistent class Trade
{
	int4 user_id;
	int4 investor_id;
	char<10> secu_account;
	string security_code;
	uint1 exchange_type;
	uint1 bs_flag;
	int4 business_code;
	uint1 price_type;
	PriceType price;
	VolumeType volume;
	int4 branch_id;
	int4 pbu_id;
	char<10> order_sys_sno;
	char<10> order_exchange_sno;
	uint1 status;
	VolumeType volume_traded;
	AmountType amount_traded;
	int4 trade_sys_sno;
	char<10> trade_exchange_sno;

	tree<order_sys_sno> OrderSysIdx;
};