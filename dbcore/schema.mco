#define int1  signed<1>
#define int2  signed<2>
#define int4  signed<4>
#define uint1  unsigned<1>
#define uint2  unsigned<2>
#define uint4  unsigned<4>
#define uint8 unsigned<8>
#define PriceType  double
#define AmountType double
#define VolumeType unsigned<4>
#define SysSnoType unsigned<4>
#define OrderExchangeIDType char<16>
#define TradeExchangeIDType char<16>
#define ClOrdIDType         char<10>
#define SeqNumType     int<8>


declare database genericdb;

class SysConfig
{
	int4 config_id;
	int4 broker_id;
	char<8> system_date;
	char<8> trade_date;

	unique tree<config_id> Idx;
};

class User
{
	int4 broker_id;
	unsigned<4> user_id;
	char<8> password;

	unique tree<user_id> UserIdIdx;
};

class Investor
{
	int4 investor_id;
	int4 branch_id;

	unique tree<investor_id> Idx;
};

class SecurityAccount
{
	int4 broker_id;
	unsigned<4> investor_id;
	uint1 exchange_type;
	char<10> security_account;
	int4 pbu_id;
	char<30> rpt_queue;

	unique tree<investor_id, exchange_type, security_account> Idx;
	tree<investor_id> InvestorIdx;
};

class Branch
{
	int4 branch_id;
	int4 sh_branch_id;
	int4 sz_branch_id;

	unique tree<branch_id> Idx;
};

class NextSNO
{
	int4 topic_id;
	int4 next_sno;

	unique tree<topic_id> Idx;
};

class InputOrder
{
	uint2 owner_type;
	int4 user_id;
	int4 investor_id;
	int4 front_id;
	int4 session_id;
	int4 order_ref;
	char<10> security_account;
	string instrument_code;
	uint1 exchange_type;
	uint1 direction;
	int4 business_code;
	uint1 price_type;
	PriceType price;
	VolumeType volume;

	unique tree<front_id, session_id, order_ref> SessionIdx;
	tree<investor_id> InvestorIdx;
};

class Order
{
	int4 front_id;
	int4 session_id;
	int4 order_ref;
	int4 user_id;
	int4 investor_id;
	char<10> security_account;
	string instrument_code;
	uint1 exchange_type;
	uint1 direction;
	int4 business_code;
	uint1 price_type;
	PriceType price;
	VolumeType volume_total_original;
	int4 branch_id;
	int4 exchange_branch_id;
	int4 pbu_id;
	SysSnoType order_sys_id;
	ClOrdIDType client_order_id;
	OrderExchangeIDType order_exchange_id;
	uint1 status;
	VolumeType volume_cum;
	AmountType amount_cum;
	VolumeType volume_leaves;
	VolumeType volume_cancelled;

	unique tree<front_id, session_id, order_ref> SessionIdx;	
	unique tree<order_sys_id> SysIdx;
	unique tree<client_order_id> clOrdIDIdx;
	tree<exchange_type, pbu_id, order_exchange_id> ExchangeIdx;
	tree<investor_id> InvestorIdx;
};

class OrderAction
{
	int4 user_id;
	int4 investor_id;
	int4 front_id;
	int4 session_id;
	int4 order_ref;
	char<10> order_sys_sno;
	uint1 exchange_type;
	char<10> order_exchange_sno;
	int4 branch_id;
	char<10> secu_account;
	string security_code;
	uint1 bs_flag;
	VolumeType volume;
	PriceType price;
	SysSnoType action_sys_id;
	ClOrdIDType client_action_id;
	OrderExchangeIDType action_exchange_id;

	unique tree<action_sys_id> SysIdx;
	tree<investor_id> InvestorIdx;

};

/*
* 上海： ordwith2， cjhb
* 深圳： execution report  
插入后，
1 对主键、委托源信息进行补充，除必须的简单字典转义对报告的不同交易所不同字段有效性不做调整，
尽量保持原貌（如上海只有成交量 成交价格， 深圳有委托剩余量等，都不去做修改，该流水信息能够体现交
易所接口原生数据）
2 更新Order状态
3 结合Order信息和当前Report,产生一笔UserExecutionReport流水 
注意： 用户的Trade也是从这里读取
*/
class InnerExecutionReport
{
	
	int4 investor_id;
	uint1 exchange_type;
	char<10> security_account;
	string instrument_code;
	uint1 exec_type;
	TradeExchangeIDType report_exchange_id;    //沪New/Rejct, Cancelled :0
	

	ClOrdIDType client_order_id;              //沪深 New/Reject, 深Cancelled， 沪深 Trade
	OrderExchangeIDType order_exchange_id;    //沪深 New/Reject, 沪Cancelled，   深 Trade
	ClOrdIDType  action_client_order_id;      //沪深 Cancelled 
	OrderExchangeIDType action_exchange_id;   //沪深 Cancelled
	
	SysSnoType ier_sys_id;       //插入时分配
	SysSnoType order_sys_id;     //插入时关联

	uint1 bs_flag;
	uint1 price_type;
	PriceType price;             //源信息
	VolumeType volume;           //源信息
	int4 branch_id;              //源信息
	int4 exchange_branch_id;
	int4 pbu_id;             
		
	uint1 status;                //沪深 New/Rejected,Cancelled ; 深 Trade
	VolumeType volume_last;      //沪深 Trade
	PriceType price_last;        //沪深 Trade
	VolumeType volume_cum;       //深 New/Reject,Cancelled,Trade：已成交量
	VolumeType volume_leaves;    //深 New/Reject,Cancelled,Trade：剩余量
	VolumeType volume_cancelled; //沪 New/Reject

    unique tree<exchange_type, pbu_id, order_sys_id, exec_type, report_exchange_id> ExchangeIdx;
	unique tree<ier_sys_id> SysIdIdx;
	tree <order_sys_id> OrderSysIdIdx;
	tree <investor_id> InvestorIdx;
};

class UserExecutionReport
{
	int4 investor_id;
	uint1 exchange_type;
	char<10> security_account;
	string instrument_code;
	uint1 exec_type;
	int4 front_id;
	int4 session_id;
	int4 order_ref;
	SysSnoType order_sys_id;     //插入时关联
	SysSnoType uer_sys_id;       //插入时分配
	SysSnoType ier_sys_id;       //如果ExecType=Create;ier_sys_id = 0

	uint1 bs_flag;
	uint1 price_type;            //委托价格类型，源信息
	PriceType price;             //委托价格，源信息
	VolumeType volume;           //委托数量，源信息
	int4 branch_id;
	int4 pbu_id;             
		
	uint1 status;                //
	VolumeType volume_last;      //如果ExecType != Trade;volume_last = 0
	PriceType price_last;        //如果ExecType != Trade;price_last = 0
	AmountType amount_cum;       //累计成交金额  sum(数量*价格)
	VolumeType volume_cum;       //已成交量

	unique tree<uer_sys_id> SysIdIdx;
	unique tree<order_sys_id, exec_type, ier_sys_id> InnerReportIdx;
	tree<investor_id, uer_sys_id> InvestorIdx;
};

class Fund
{
	int4 investor_id;
	int4 branch_id;
	uint1 currency_type;
	AmountType amount_pre;
	AmountType amount_available;
	AmountType amount_drawable;
	AmountType amount_frozen;

	unique tree<investor_id, currency_type> FundIdx;
};

class Position
{
	int4 investor_id;
	char<10> security_account;
	uint1 exchange_type;
	string instrument_code;
	string instrument_name;
	VolumeType volume_pre;
	VolumeType volume_available;
	VolumeType volume;
	VolumeType volume_frozen;
	unique tree<investor_id, security_account, exchange_type, instrument_code> PositionIdx;
	tree<investor_id> InvestorIdx;
};

class TestER
{
    int4 investor_id;
	int4 sno;
	
	unique tree<investor_id, sno> InvIdx;
};